{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-us-0909"
		},
		"azblobstorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azblobstorage'",
			"defaultValue": "DefaultEndpointsProtocol=https;AccountName=@{linkedService().blobName};EndpointSuffix=core.windows.net;"
		},
		"azkv_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kvpavi.vault.azure.net"
		},
		"azSQLServer_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "udayss.database.windows.net"
		},
		"azSQLServer_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().DBname}"
		},
		"azSQLServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminuser"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/azkv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('azkv_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azSQLServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"DBname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('azSQLServer_properties_typeProperties_server')]",
					"database": "[parameters('azSQLServer_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('azSQLServer_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "azkv",
							"type": "LinkedServiceReference"
						},
						"secretName": "PasswordforSS"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azkv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azblobstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"blobName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('azblobstorage_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "azkv",
							"type": "LinkedServiceReference"
						},
						"secretName": "keyforblob"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azkv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetfromSS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azSQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBname": {
							"value": "@dataset().DBserver",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"srctbl": {
						"type": "string"
					},
					"DBserver": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().srctbl",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azSQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azblobstorage",
					"type": "LinkedServiceReference",
					"parameters": {
						"blobName": {
							"value": "@dataset().blobnamefromDS",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"filefromDS": {
						"type": "string"
					},
					"blobnamefromDS": {
						"type": "string"
					},
					"folderfromDS": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filefromDS",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderfromDS",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsfordest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azblobstorage",
					"type": "LinkedServiceReference",
					"parameters": {
						"blobName": {
							"value": "@dataset().blobfromDS",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"blobfromDS": {
						"type": "string"
					},
					"folderfromDS": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folderfromDS",
							"type": "Expression"
						},
						"container": "containerfortest"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsdelimited')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azblobstorage",
					"type": "LinkedServiceReference",
					"parameters": {
						"blobName": "sapavi"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Sample-Spreadsheet-10-rows.csv",
						"folderPath": "Dailyfile",
						"container": "containerfortest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobGetMetdata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get details about folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dsfordest",
								"type": "DatasetReference",
								"parameters": {
									"blobfromDS": "sapavi",
									"folderfromDS": "Dailyfile"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter out only file type",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get details about folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get details about folder').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().type,'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Process each file one by one",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out only file type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out only file type').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('curiteration'),'png')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Move all other than Image",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "dsBinary",
														"type": "DatasetReference",
														"parameters": {
															"filefromDS": {
																"value": "@variables('curiteration')",
																"type": "Expression"
															},
															"blobnamefromDS": "sapavi",
															"folderfromDS": "Dailyfile",
															"container": "containerfortest"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsfordest",
														"type": "DatasetReference",
														"parameters": {
															"blobfromDS": "sapavi",
															"folderfromDS": "Archive\\Documents"
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Move Image alone",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "dsBinary",
														"type": "DatasetReference",
														"parameters": {
															"filefromDS": {
																"value": "@variables('curiteration')",
																"type": "Expression"
															},
															"blobnamefromDS": "sapavi",
															"folderfromDS": "Dailyfile",
															"container": "containerfortest"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsfordest",
														"type": "DatasetReference",
														"parameters": {
															"blobfromDS": "sapavi",
															"folderfromDS": "Archive\\Screenshot"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "curiteration",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"curiteration": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsfordest')]",
				"[concat(variables('factoryId'), '/datasets/dsBinary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DBLoadbackuptable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "@{pipeline().parameters.srcsch}.@{pipeline().parameters.sTable}"
							},
							{
								"name": "Destination",
								"value": "@{pipeline().parameters.Dsch}.@{pipeline().parameters.Dtable}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductModelID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductModelID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "datasetfromSS",
								"type": "DatasetReference",
								"parameters": {
									"srctbl": {
										"value": "@pipeline().parameters.sTable",
										"type": "Expression"
									},
									"DBserver": {
										"value": "@pipeline().parameters.DBN",
										"type": "Expression"
									},
									"schema": {
										"value": "@pipeline().parameters.srcsch",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetfromSS",
								"type": "DatasetReference",
								"parameters": {
									"srctbl": {
										"value": "@pipeline().parameters.Dtable",
										"type": "Expression"
									},
									"DBserver": {
										"value": "@pipeline().parameters.DBN",
										"type": "Expression"
									},
									"schema": {
										"value": "@pipeline().parameters.Dsch",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sTable": {
						"type": "string",
						"defaultValue": "ProductModel"
					},
					"srcsch": {
						"type": "string",
						"defaultValue": "SalesLT"
					},
					"DBN": {
						"type": "string",
						"defaultValue": "udayDBSQLserver"
					},
					"Dtable": {
						"type": "string",
						"defaultValue": "ProductModel_bk"
					},
					"Dsch": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datasetfromSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StorageActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dsBinary",
								"type": "DatasetReference",
								"parameters": {
									"filefromDS": "Image.png",
									"blobnamefromDS": "sapavi",
									"folderfromDS": "Dailyfile",
									"container": "containerfortest"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dsfordest",
								"type": "DatasetReference",
								"parameters": {
									"blobfromDS": "sapavi",
									"folderfromDS": "Archive\\Documents"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsBinary')]",
				"[concat(variables('factoryId'), '/datasets/dsfordest')]"
			]
		}
	]
}